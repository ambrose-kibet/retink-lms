// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  name           String?
  gender         String
  enrollments    Enrollment[]
  lessonProgress LessonProgress[]
  createdAt      DateTime @default(now())
}

model Course {
  id          String     @id @default(uuid())
  title       String
  thumbnail   String
  description String?
  lessons     Lesson[]
  enrollments Enrollment[]
  createdAt   DateTime   @default(now())
}

model Enrollment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  enrolledAt DateTime @default(now())

  @@unique([userId, courseId]) // Prevent duplicate enrollments
}

model Lesson {
  id          String   @id @default(uuid())
  title       String
  content     String   // Text description
  youtubeUrl  String
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  order       Int      // For sequencing lessons
  createdAt   DateTime @default(now())
  lessonProgress LessonProgress[]
}

model LessonProgress {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String
  completed Boolean  @default(false)
  completedAt DateTime?

  @@unique([userId, lessonId]) // Only one progress record per lesson per user
}